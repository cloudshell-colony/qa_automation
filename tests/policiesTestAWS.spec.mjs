
import test, { expect } from "@playwright/test";
import { loginToAccount } from "./functions/accounts.mjs";
import { launchAutoGeneratedBlueprint } from "./functions/blueprints.mjs";
import { closeModal, openAndPinSideMenu, generateUniqueId } from "./functions/general.mjs";
import { addPolicy, deletePolicy } from "./functions/policies.mjs";
import { endSandbox, validateSandboxFailedDueToPolicy, stopAndValidateAllSBsCompleted, validateSBisActive } from "./functions/sandboxes.mjs";
import { goToSpace } from "./functions/spaces.mjs";

const baseURL = process.env.baseURL;
const password = process.env.allAccountsPassword;
const account = process.env.account;
const user = process.env.adminEMail
const timestemp = Math.floor(Date.now() / 1000);
const id = timestemp.toString().concat('-' + generateUniqueId());
const space = 'aws-policies';
let session = "empty session";
let page;
let executionHostName = 'qa-eks'

test.describe('Check AWS policies', () => {

    test.beforeAll(async ({ browser }) => {
        // get admin session
        page = await browser.newPage();
        await loginToAccount(page, user, account, password, baseURL);
        await closeModal(page);
        await openAndPinSideMenu(page);
    });

    test.afterAll(async() => {
        console.log(`Stopping all Sbs after test complteted in space ${space}`);
        await page.goto(`${baseURL}/${space}`);
        //await goToSandboxListPage(page);
        await stopAndValidateAllSBsCompleted(page);
    });

    test.skip('Private S3 policy tests', async () => {
        let policyType = 'AWS Only Private S3 Buckets'
        let policyName = policyType + '-' + id;
        let bucketName = policyName.replaceAll(' ', '-').toLowerCase();
        let inputs = {'inputs\.acl': "public-read", 'inputs\.agent': `${executionHostName}`,'inputs\.name': `${bucketName}`,}
        console.log('Adding private S3 only policy');
        await addPolicy(page, policyType, policyName, 'space', '', space);
        // Launch fails with public S3
        await goToSpace(page, space);
        await page.click('[data-test=blueprints-nav-link]');
        console.log('Launching blueprint with public bucket');
        await launchAutoGeneratedBlueprint(page, 's3', inputs)
        await validateSandboxFailedDueToPolicy(page, 'Deployment of not private AWS S3 bucket is not allowed');
        await endSandbox(page);
        // Launch succeeds with private S3
        inputs = {'inputs\.acl': "private", 'inputs\.agent': `${executionHostName}`,'inputs\.name': `${bucketName}`,}
        await page.click('[data-test=blueprints-nav-link]');
        console.log('Launching blueprint with private bucket');
        await launchAutoGeneratedBlueprint(page, 's3', inputs)
        await validateSBisActive(page);
        await endSandbox(page);
        await deletePolicy(page, policyName);
    });

    test.skip('Allowed regions AWS', async() => {
        let policyType = 'AWS Allowed Regions'
        let policyName = policyType + '-' + id;
        let region = 'eu-west-1'
        let bucketName = policyName.replaceAll(' ', '-').toLowerCase();
        let inputs = {'inputs\.region': "eu-west-2", 'inputs\.agent': `${executionHostName}`,'inputs\.name': `${bucketName}`,}
        console.log('Adding allowed regions policy');
        await addPolicy(page, policyType, policyName, 'space', region, space);
        // Launch fails with wrong region
        await goToSpace(page, space);
        await page.click('[data-test=blueprints-nav-link]');
        console.log('Launching blueprint with prohibited region');
        await launchAutoGeneratedBlueprint(page, 's3', inputs)
        await validateSandboxFailedDueToPolicy(page, 'allowed_regions - "Invalid region:');
        await endSandbox(page);
        // Launch succeeds with correct region
        inputs = {'inputs\.region': region, 'inputs\.agent': `${executionHostName}`,'inputs\.name': `${bucketName}`,}
        await page.click('[data-test=blueprints-nav-link]');
        console.log('Launching blueprint with allowed region');
        await launchAutoGeneratedBlueprint(page, 's3', inputs)
        await validateSBisActive(page);
        await endSandbox(page);
        await deletePolicy(page, policyName);
    })
});