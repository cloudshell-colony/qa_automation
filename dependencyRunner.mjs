import * as dotenv from 'dotenv';
import fetch from "node-fetch";
import { agentDepHandler, agentsCreated, approvalChannelDepHandler, approvalChannelsCreated, assetsAutoGenerated, usersAdded, repositoriesCreated, repositoryDepHandler, spaceDepHandler, spacesCreated, usersDepHandler } from './depHandlers.mjs';
import { createAccountAPI, getSessionAPI } from './tests/functions/accounts.mjs';
dotenv.config();

var baseURL = process.env.baseURL;
if (baseURL.includes('localhost')) {
    baseURL = 'http://localhost:5050';
}
const password = process.env.allAccountsPassword;
const email = process.env.adminEMail;
const accountName = process.env.account;
const qualiNextToken = process.env.qualiNextToken;
const tenantId = process.env.azureTenantId;
const subscriptionId = process.env.azureSubscriptionId;
const namespace = process.env.nameSpace;
const serviceAccount = process.env.serviceAccount;

// missing dependencies:
// need to develop methods for adding AKS (K8S context switch etc)
/**
 * This const saves a dictionary of dependencies for each test. 
 * Keys are the tests names as seen in the spec.mjs files.
 * Values are also (key,value) pairs, currently allowing the following keys: space, agents, repositories, users, channels.
 * @param {*} space: a single space name that will be created to run the test.
 * @param {*} agents: an array of agents. Each agent entry should contain 'name', 'type' & 'associated' (whether to associate this agent to the test space).
 * @param {*} repositories: an array of repositories. Each repo should contain 'url', 'token', 'name' & 'branch'.
 * Optionally, repositories can also contain 'assets' and 'published'. Assets is an array of asset name to auto-generate, Published is an array of ready blueprints in the repo that need to be published for the test.
 * @param {*} users: an array of users that need to be added to the test account and/or space. Each user should have 'email', 'password' & 'role'. Role can be 'Admin' or 'Space Developer'
 * @param {*} channels: an array of approval channels to create. Each channel should have 'name', 'type' & 'approvers' - an array of emails.
 */
const testsDependencies = {
    actionTestsUI: {space: "Actions", agents: [{name: 'qa-eks', type: 'eks',associated: true}], repositories: [{url: "https://github.com/QualiNext/test-spec2-public", 
            token: qualiNextToken, name: 'test-spec2-public', branch: 'master', assets: ['create-ec2-instance']}]},

    blueprintValidation: {space: "bp-validation", agents: [{name: 'qa-eks', type: 'eks',associated: true}, {name: 'bp-validation2', type: 'eks',associated: false}],
            repositories: [{url: "https://github.com/QualiNext/qa-bp-validation", token: qualiNextToken, name: 'qa-bp-validation', branch: 'master'}]},

    collaboratorsTests: {space: "Collaborator", agents: [{name: 'qa-eks', type: 'eks',associated: true}], repositories: [{url: "https://github.com/QualiNext/qa-bp-validation",
            token: qualiNextToken, name: 'qa-bp-validation', branch: 'master', assets: ['simpleTF']}], users: [{email: 'asaf.y@quali.com', password:'Qual!123', role: 'Space Developer'}]},

    driftCheckAPI: {space: "drift-api", agents: [{name: 'qa-eks', type: 'eks',associated: true}], repositories: [{url: "https://github.com/QualiNext/qa-bp-validation",
            token: qualiNextToken, name: 'qa-bp-validation', branch: 'master', assets: ['s3']}]},

    driftTestUI: {space: "drift-test", agents: [{name: 'qa-eks', type: 'eks',associated: true}], repositories: [{url: "https://github.com/QualiNext/torque-demo",
            token: qualiNextToken, name: 'torque-demo', branch: 'master', published: ['drift-test']}]},
    
    endingSB: {space: "EndingSB", agents: [{name: 'qa-eks', type: 'eks',associated: true}, {name: 'qa-aks', type: 'aks',associated: true}], repositories: [{url: "https://github.com/QualiNext/test-spec2-public",
            token: qualiNextToken, name: 'test-spec2-public', branch: 'master', assets: ['azure_vm_legacy_wi', 'create-ec2-instance']}]},

    parametersTests: {space: process.env.space},

    policiesTestAWS: {space: 'aws-policies', agents: [{name: 'qa-eks', type: 'eks',associated: true}], repositories: [{url: "https://github.com/QualiNext/test-spec2-public", 
            token: qualiNextToken, name: 'test-spec2-public', branch: 'master', assets: ['create-ec2-instance']}, {url: "https://github.com/QualiNext/qa-bp-validation",
            token: qualiNextToken, name: 'qa-bp-validation', branch: 'master', assets: ['s3']}], users: [{email: 'amir.o@quali.com', password: password, role: 'Admin'}],
            channels:[{name: 'policy approval', type: 'Email', approvers: ['amir.o@quali.com']}]},

    sendboxAutomateShutdownTests: {space: "extend-test", agents: [{name: 'qa-eks', type: 'eks',associated: true}], repositories: [{url: "https://github.com/QualiNext/qa-bp-validation",
            token: qualiNextToken, name: 'qa-bp-validation', branch: 'master', assets: ['simpleTF']}]},

    updatesTest: {space: 'update-test', agents: [{name: 'qa-eks', type: 'eks',associated: true}], repositories: [{url: "https://github.com/cloudshell-colony/qa_automation",
            token: process.env.githubToken, name: 'qa_automation', branch: 'main', assets: ['simpleTF']}]},
    
    workFlows: {space: "Workflows", agents: [{name: 'qa-eks', type: 'eks',associated: true}], repositories: [{url: "https://github.com/QualiNext/test-spec2-public", 
            token: qualiNextToken, name: 'test-spec2-public', branch: 'master', assets: ['create-ec2-instance']}]},
            
    blueprintsCatalogTests: {space: "API-tests", repositories: [{url: "https://github.com/QualiNext/test-spec2-public", 
            token: qualiNextToken, name: 'test-spec2-public', branch: 'master', assets: ['create-ec2-instance']},{url: "https://github.com/QualiNext/torque-demo", 
            token: qualiNextToken, name: 'torque-demo', branch: 'master', assets: ['drift-test']}]},
    
    ExecutionHost: {space: "API-tests", agents: [{name: 'bp-validation2', type: 'eks', associated: false},{name: 'AKSTest', type: 'AKS', associated: false}]},

    extendSendboxTest: {space: "API-tests", agents: [{name: 'qa-eks', type: 'eks',associated: true}], repositories: [{url: "https://github.com/QualiNext/test-spec2-public", 
            token: qualiNextToken, name: 'test-spec2-public', branch: 'master', assets: ['create-ec2-instance']}]},
    
    validateBlueprintTest: {space: "API-tests", repositories: [{url: "https://github.com/QualiNext/test-spec2-public", 
            token: qualiNextToken, name: 'test-spec2-public', branch: 'master', assets: ['create-ec2-instance']}]},

    pendingTest:{space:"PendingTest", agents: [{name: 'qa-eks', type: 'eks',associated: true}], repositories:[{url: "https://github.com/QualiNext/test-spec2-public",
      token: qualiNextToken, name: 'test-spec2-public', branch:'master', assets:['create-ec2-instance']}]},  

    endlessSendboxTests: {space: "endlessSB", agents: [{name: 'qa-eks', type: 'eks',associated: true}, {name: 'qa-aks', type: 'aks',associated: true}],  repositories: [{url: "https://github.com/QualiNext/test-spec2-public", 
      token: qualiNextToken, name: 'test-spec2-public', branch: 'master', assets: ['create-ec2-instance']},{url: "https://github.com/QualiNext/torque-demo", 
      token: qualiNextToken, name: 'torque-demo', branch: 'master', assets: ['drift-test']}]},
}

/**
 * Function which runs the different handlers for all of a certain's test dependencies (space, repo, agent...)
 * @param {*} testDeps Object containing all of the test dependencies. Possibly need to create object for this for easier coding
 */
const runAllTestDependencies = async(testDeps) =>{
    let testSpace = testDeps.space;
    console.log(subscriptionId);
    await spaceDepHandler(session, baseURL, testSpace);
    if(testDeps.agents != undefined){
        await agentDepHandler(session, baseURL, testDeps.agents, testSpace, namespace, serviceAccount, tenantId, subscriptionId);
    }
    if(testDeps.repositories != undefined){
        await repositoryDepHandler(session, baseURL, testDeps.repositories, testSpace);
    }
    if(testDeps.users != undefined){
        await usersDepHandler(session, baseURL, testDeps.users, testSpace, accountName);
    }
    if(testDeps.channels != undefined){
        await approvalChannelDepHandler(session, baseURL, testDeps.channels);
    }
}

// Initiate tests list to create / validate dependencies for.
// If list in .env file was empty then we will check all tests
var testsList;
if(process.env.dependencyTests === "" || process.env.dependencyTests === undefined){
    testsList = Object.keys(testsDependencies);
}
else{
    testsList = process.env.dependencyTests.split(", "); // .env file can only handle strings
}


// Create account if doesn't exist and get session
const response = await fetch(`${baseURL}/api/accounts/${accountName}/details`, {
    "method": "GET",
    "headers": {
        'Content-Type': 'application/json'
    }
});
if(response.status === 404){
    console.log(`Account ${accountName} doesn't exist, creating it`);
    let resp = await createAccountAPI(baseURL, accountName, 'quali', email, 'FN', 'LN', password);
    if(resp.status != 200){
        throw Error(`Failed creating account ${accountName}. Full response:` + await resp.text());
    }
}
else{console.log(`Account ${accountName} exists`);}
let session = await getSessionAPI(email, password, baseURL, accountName);

// run dependencies for each test in the list
const testErrorList = [];
for (const test of testsList) {
    if(testsDependencies[test] != undefined){
        console.log(`Validating and creating dependencies for test ${test}`);
        try {
            await runAllTestDependencies(testsDependencies[test]);
        } catch (error) {
            testErrorList.push(`Received following error for test '${test}': \n` + error.message);
        }
        console.log('*********************************************************');
    }
    else{
        console.log(`Test '${test}' has no dependencies. Did you spell it according to the test file name?`);
    }
}

// log what changes were actually made when running
console.log(`Spaces created: ${spacesCreated}`);
console.log(`Agents created: ${agentsCreated}`);
console.log(`Repositories created: ${repositoriesCreated}`);
console.log(`Blueprints generated from assets: ${assetsAutoGenerated}`);
console.log(`Users added: ${usersAdded}`);
console.log(`Approval channels created: ${approvalChannelsCreated}`);

// print all errors accumulated during the run, if any
if (testErrorList.length === 0) {
    console.log('All test dependencies were handled successfully, tests should now be runable');
} else {
    console.error(`${testErrorList.length} tests failed. Full tests error list:`);
    for (const errors of testErrorList) {
        console.error(errors);
    }
}
